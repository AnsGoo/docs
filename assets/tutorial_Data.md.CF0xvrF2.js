import{_ as t,D as o,c,l as a,a as s,I as l,a3 as e,o as p}from"./chunks/framework.DtVbQgbj.js";const d="/docs/assets/015.CVUOmTCp.png",n="/docs/assets/16.B2gZyU43.png",h="/docs/assets/17.zX9MPPuO.png",C=JSON.parse('{"title":"静态数据","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/Data.md","filePath":"tutorial/Data.md"}'),r={name:"tutorial/Data.md"},k=e('<p>平台集成了<code>通用数据</code>管理功能，目前已完成<code>静态数据</code>和<code>Rest数据</code>功能开发</p><h1 id="静态数据" tabindex="-1">静态数据 <a class="header-anchor" href="#静态数据" aria-label="Permalink to &quot;静态数据&quot;">​</a></h1><p>静态数据是指平台提供了一个统一接口用来读取或者存储的数据</p><p><img src="'+d+'" alt=""></p><p>用户可以在静态页面对平台存储的静态数据进行<code>修改</code>、<code>删除</code>和<code>新增</code></p><h2 id="新增与修改" tabindex="-1">新增与修改 <a class="header-anchor" href="#新增与修改" aria-label="Permalink to &quot;新增与修改&quot;">​</a></h2>',6),u=a("code",null,"原始数据",-1),E=a("code",null,"修改",-1),g=a("code",null,"新增",-1),_=a("code",null,"处理数据",-1),b=e('<h2 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h2><p>在右侧静态数据列表中，鼠标右击即可删除对应的静态数据</p><h2 id="设计思路" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路" aria-label="Permalink to &quot;设计思路&quot;">​</a></h2><blockquote><p>很多低代码平台的静态数据保存在页面中配置文件中，但是我们无法预测用户配置的静态数据大小，如果将静态数据存储在页面配置文件中，将会导致页面配置文件数据体积增大，进而影响页面渲染速度。</p></blockquote><blockquote><p>静态数据保存在平台后台的话又会带来另一个问题，静态数据在多个组件中被复用时，在某个组件中更改了静态数据内容时所带来的影响是不是可预见的，答案是否定的。</p></blockquote><blockquote><p>我们不建议在组件使用过程中更改静态数据内容，我们可以通过在每个组件中写不同的脚本来适配同一数据源在不同组件复用时数据差异。</p></blockquote><blockquote><p>静态数据的修改应该考虑数据被复用时，对使用的组件效果影响，因此我们将静态数据设计为存储在平台后端，在使用组件使用过程中不可更改，但是在静态数据页面可修改！</p></blockquote><h1 id="rest数据" tabindex="-1">Rest数据 <a class="header-anchor" href="#rest数据" aria-label="Permalink to &quot;Rest数据&quot;">​</a></h1><p><code>Rest 数据</code>是通过<code>HTTP</code>接口获取数据,应该是平台最主要的获取数据的方式，一个类似<code>PostMan</code>的接口调试</p><p><img src="'+n+'" alt=""></p><h2 id="跨域拦截" tabindex="-1">跨域拦截 <a class="header-anchor" href="#跨域拦截" aria-label="Permalink to &quot;跨域拦截&quot;">​</a></h2><p>因为浏览器的安全策略，一旦你的接口服务未配置跨域相关安全策略，那么是无法在本平台进行接口调试的，可以跟接口服务开发人员协调，支持跨域访问</p><h2 id="设计思路-1" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路-1" aria-label="Permalink to &quot;设计思路&quot;">​</a></h2><blockquote><p><code>Rest数据</code>页面设计是类似于<code>PostMan</code>的作用，但是很遗憾，我们尚未达到<code>Postman</code>的效果，目前仅支持<code>application/json</code>数据的请求和响应，但是对于<code>FormData</code>、<code>Blob</code>和<code>ArrayBuffer</code>等数据尚未支持</p></blockquote><blockquote><p><code>Rest数据</code>的定义数据是可控的，主要是 <code>url</code>、<code>method</code>、<code>headers</code>、<code>params</code>、<code>data</code>，因此整个 <code>Rest数据</code>定义我们是保存在页面配置文件中的，我们支持在<code>Rest数据</code>页面增加或者修改接口定义，同时我们也支持在单个组件中添加接口，也就是说你修改任意一接口也不会影响已经在其他组件中被使用的该接口</p></blockquote><h1 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-label="Permalink to &quot;脚本&quot;">​</a></h1><p>为了提高组件的<code>复用性</code>和接口的<code>兼容性</code>，我们提供了脚本功能。</p><p><img src="'+h+`" alt=""></p><p>通过脚本你可以将<code>接口返回的数据</code>处理成<code>组件所需要的数据</code>,这样就你就无需担心你的组件和接口之间的无法兼容的问题。</p><h2 id="javascript脚本" tabindex="-1">Javascript脚本 <a class="header-anchor" href="#javascript脚本" aria-label="Permalink to &quot;Javascript脚本&quot;">​</a></h2><p><code>Javascript脚本</code> 我们使用的是js的 <code>new Function()</code>特性，因此<code>Javascript脚本</code>,你只需要书写函数体本身即可</p><p>例如</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filterFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你只需要写</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>Javascript脚本</code> 生成函数默认有两个位置参数<code>resp</code>和<code>options</code></p><ul><li><p><code>resp</code>: 需要处理的数据</p></li><li><p><code>options</code>: 在组件中使用，默认返回的组件的<code>propValue</code>属性</p></li></ul>`,27);function y(m,q,F,v,f,P){const i=o("x-icon");return p(),c("div",null,[k,a("p",null,[s("点击静态数据的"),u,s("页签,在代码编辑器里面可以对静态数据进行"),E,s("和"),g,s("，点击"),l(i,{name:"save"}),s("按钮，即可将在"),_,s("页签看到，此静态数据被脚本处理完成之后的效果，点击右上角的保存按钮，即可将此静态书进行更新和保存")]),b])}const D=t(r,[["render",y]]);export{C as __pageData,D as default};
